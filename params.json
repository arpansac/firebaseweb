{
  "name": "Firebase Web",
  "tagline": "Building a Chat Application using Firebase Web",
  "body": "\r\nURL | [https://github.com/arpansac/firebasewebchat-tutorial](https://github.com/arpansac/firebasewebchat-tutorial)\r\n------------ | -------------\r\nTechnologies Used | Firebase, HTML, CSS, JS/jQuery, Internet\r\n\r\n### This Codelab document will take you through the basics of Firebase and also help you build a basic web application for chatting online.\r\n\r\n## Index\r\n1. Introduction\r\n2. Prerequisites\r\n3. Sign up for Firebase\r\n4. Create the HTML Page\r\n5. Begin Connecting to Firebase\r\n6. Send Data to Firebase\r\n7. Store an Object\r\n8. Working with an Array of Objects\r\n9. Reading/Fetching Data from Firebase\r\n10. Styling\r\n11. Make your Application available to everyone!\r\n12. Authenticate Users\r\n13. Secure (and validate) your Data\r\n14. What more can we do?\r\n15. Links to Resources\r\n\r\n## 1. Introduction\r\nThis tutorial is adapted from https://www.firebase.com/tutorial/#gettingstarted \r\nIn this lab we’re going to create our Firebase app - a chat application. We’re going to be using HTML, jQuery and CSS to create our application. Firebase also offers integration with popular frameworks such as Angular, Ember, ReactJS and Ionic. \r\n\r\nWe can also build the same application with Objective-C or Swift for iOS or Java for Android. Complete documentation is available from [www.firebase.com/docs](www.firebase.com/docs).\r\n\r\n**The most important thing is that Firebase data is NoSQL. It uses JSON to store it's data. If you're yet to get familiar with what JSON is, Google it. It's pretty easy.**\r\n\r\n## 2. Requirements\r\n\r\n* An internet connection\r\n* A Browser (Preferably Google Chrome because it gives better debugging options)\r\n* Basic knowledge of HTML, CSS, JS (We'll be using jQuery though)\r\n* A text editor to write the code\r\n\r\n# Let's Get Started\r\n\r\n## 3. Sign up for Firebase\r\n\r\nTo start we need to get a Firebase Account. You can create a Firebase account for free using your Google account. Here's the link: [https://www.firebase.com/](https://www.firebase.com/) \r\n\r\n### Once you’ve done that a new development only Firebase will automatically be created for you. It’ll be named [PROJECTID].firebaseio.com and you’ll use this as your backend/database for this Codelab (you can of course choose to create a new one).\r\n\r\n## 4. Create the HTML Page\r\n\r\n* Set up the basic HTML document (We can name it index.html)\r\n<br/>**(index.html)**\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>FireChat</title>\r\n  </head>\r\n  <body>\r\n  </body>\r\n</html>\r\n```\r\n\r\n* Add the HTML DOM elements which will be used to make our chat application inside ````<body></body>````\r\n<br/>**(index.html)**\r\n```html\r\n<body>\r\n  <div id=\"chat_container\">\r\n    <div id=\"results\"></div>\r\n    <div id=\"form_container\">\r\n      <input id=\"username\" type=\"text\" placeholder=\"Name\">\r\n      <textarea id=\"text\" type=\"text\" placeholder=\"Message\"></textarea>\r\n      <button id=\"post\">Post</button>\r\n    </div>\r\n   </div>\r\n</body>\r\n```\r\n\r\n* Include the Firebase library and jQuery enclosed in script tags inside ````<head></head>````\r\n<br/>**(index.html)**\r\n```html\r\n<head>\r\n  <title>FireChat</title>\r\n  <script src='https://cdn.firebase.com/js/client/2.2.1/firebase.js'></script>\r\n  <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js'></script>\r\n</head>\r\n```\r\n\r\n## 5. Begin Connecting to Firebase\r\n\r\n* First, we will create a reference to our Firebase application using the url of the application which should look like **https://[PROJECTID].firebaseio.com/**\r\n\r\n\r\n* Now create a new file within the same directory for including the script. I will **name it as firechat_script.js**, and a stylesheet named as **firechat_style.css** the structure of the project will now look like this\r\n````\r\nFirebase/\r\n  firechat/\r\n    index.html\r\n    firechat_script.js\r\n    firechat_style.css\r\n````\r\n\r\n* Include the stylesheet file in the head and the script file by creating ````<script></script>```` and adding the location in **src** attribute just before **body** of the document ends.\r\n<br/>**(index.html)**\r\n````html\r\n<head>\r\n  <title>FireChat</title>\r\n  <meta charset=\"UTF-8\">\r\n  <script src='https://cdn.firebase.com/js/client/2.2.1/firebase.js'></script>\r\n  <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js'></script>\r\n  \r\n  // Include the stylesheet\r\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"firechat_style.css\">\r\n</head>\r\n<body>\r\n  <div id=\"chat_container\">\r\n    <div id=\"results\"></div>\r\n    <div id=\"form_container\">\r\n      <input id=\"username\" type=\"text\" placeholder=\"Name\">\r\n      <textarea id=\"text\" type=\"text\" placeholder=\"Message\"></textarea>\r\n      <button id=\"post\">Post</button>\r\n    </div>\r\n   </div>\r\n  \r\n  // Include the script\r\n  <script src=\"firechat_script.js\" type=\"text/javascript\"></script>\r\n</body>\r\n````\r\n\r\n* Add a reference to our Firebase inside the file firechat_script.js\r\n<br/>**(firechat_script.js)**\r\n````javascript\r\nvar myRef = new Firebase('https://[PROJECTID].firebaseio.com/');\r\n````\r\n\r\n* Get the DOM elements which will be used for username and message in the script\r\n<br/>**(firechat_script.js)**\r\n````javascript\r\nvar myRef = new Firebase('https://[PROJECTID].firebaseio.com/');\r\n\r\nvar username_input = $('#username');\r\nvar message_input = $('#text');\r\nvar send_button = $('#post');\r\n````\r\n\r\n## 6. Send Data to Firebase\r\n\r\n* **.set()** is a method which is used to send the data to our Firebase database. Each time it is called, it **overwrites** the previous existing value. \r\n\r\n* Add the following lines to firechat_script.js\r\n<br/>**(firechat_script.js)**\r\n````javascript\r\nsend_button.click(function() {\r\n  var username = username_input.val();\r\n  var message = message_input.val();\r\n\r\n  //send the message\r\n  myRef.set(username + \" says: \" + message);\r\n\r\n  //empty the message input after sending the message\r\n  message_input.val('');\r\n}\r\n```\r\n\r\nEnter your name inside username input and a test message in the message input and click the post button. \r\nGo to your the link you have mentioned in your Firebase reference **('https://[PROJECTID].firebaseio.com/')** and you should see the change in your Firebase database.\r\n\r\nBut this **.set()** would result in clearing the database every time and writing the new lines in it.\r\n\r\nYou can try by clicking the post button again and again by changing the values of message and/or username. It'll always replace the previous values\r\n\r\n## 7. Store an Object\r\n\r\nTill now we have stored the string version of our message. As I mentioned it before, Firebase uses JSON to store our data into database, let's modify our last piece of code in firechat_script.js.\r\n\r\n* We will now send JSON data and also, instead of using **.set()**, we will use **.push()**.\r\n<br/>**(firechat_script.js)**\r\n````javascript\r\nsend_button.click(function() {\r\n  var username = username_input.val();\r\n  var message = message_input.val();\r\n\r\n  //send the message\r\n  //This time we are pushing a JSON object with keys as **user** and **text**\r\n  myRef.push({\r\n    user: username,\r\n    text: message,\r\n  )};\r\n\r\n  //empty the message input after sending the message\r\n  message_input.val('');\r\n}\r\n```\r\n\r\n* We could have used **.set()** again, but what **.push()** does is explained in the next section.\r\n* Click the post button and see the changes yourself in your Firebase. The data is now in JSON format.\r\n\r\n\r\n## 8. Working with an Array of Objects\r\n\r\n(From now on let's refer to Firebase database as just Firebase)\r\n* **Now click the post button again. Now you will see that there's a new entry in your Firebase.** \r\n* This shows what push does. It keeps adding to the list each time we send data object to Firebase. We can even push an array of objects, but it is recommended to push one at a time.\r\n\r\n## 9. Getting Data Back from Firebase\r\n\r\nTill now we've been sending data to our Firebase. But, for our chat application, we also need to display the messages which we or the other users are sending.\r\n\r\n* Now we'll use event **child_added** which is triggered each time data is added to our Firebase.\r\n* The received data is stored in **snapshot**. We will display the data/messages in the div with id **results**\r\n\r\n* Our firechat_script.js will now look like this:\r\n<br/>**(firechat_script.js)**\r\n````javascript\r\nvar myRef = new Firebase('https://[PROJECTID].firebaseio.com/');\r\n\r\nvar username_input = $('#username');\r\nvar message_input = $('#text');\r\nvar send_button = $('#post');\r\n\r\nsend_button.click(function() {\r\n  var username = username_input.val();\r\n  var message = message_input.val();\r\n\r\n  //send the message\r\n  //This time we are pushing a JSON object with keys as **user** and **text**\r\n  myRef.push({\r\n    user: username,\r\n    text: message,\r\n  )};\r\n\r\n  //empty the message input after sending the message\r\n  message_input.val('');\r\n}\r\n\r\n// 'child_added' event is called whenever a new child is added in Firebase\r\n// snapshot is the newly added data\r\nmyRef.on('child_added', function(snapshot) {\r\n    msg = snapshot.val();\r\n    var new_message = $('<div/>');\r\n    new_message.append('<p><strong>' + msg.user + '</strong></p><p>' + msg.text + '</p>');\r\n    //add a class for styling purposes    \r\n    new_message.addClass('msg');\r\n\r\n    // to differentiate between your messages and someone else's messages, we'll add a class 'me'\r\n    // to your messages and style them accordingly\r\n    new_message.addClass(msg.user == username_input.val() ? ' me' : '')   // this is an inline version of if-else    \r\n\r\n    $(\"#results\").append(new_message);\r\n});\r\n````\r\n\r\n* Refresh your page, now you'll see all your previous messages below your post button along with the username which you used.\r\n\r\n\r\n## 10. Styling\r\n####Let's begin adding some styling (css) to our application inside the stylesheet which we created earlier (**firechat_style.css**) as it needs to look like a chat application.\r\n````css\r\n.msg{\r\n\tmargin: 1rem 0;\r\n\tpadding: .5rem;\r\n\twidth: 90%;\r\n\tbackground-color: #efefef;\r\n\tword-wrap: break-word;  /* This is used so that if the message is too long then it goes to the next line*/\r\n\ttext-align: left;\r\n}\r\n\r\n/* 'me' class will change the background color and the text-alignment of your messages, \r\nthus differentiating them from the messages sent by other users */\r\n.me{\r\n\tbackground-color: #cdcdcd;\r\n\ttext-align: right;\r\n}\r\n````\r\n#### Keeping the current Tab/Browser Window open, launch another Tab/Browser window and open index.html here also. Post a message with another username and you'll see:\r\n1. Both the Tabs/Browser windows have been updated with new message\r\n2. Messages sent from your new Tab with the new username have a different alignment and background color. \r\n(See, it was so Easy!)\r\n\r\n## 11. Make your Application available to everyone!\r\n\r\n#### To begin with this we would need Node.js, you can install it directly by downloading the package from their website or using the terminal (Google it!)\r\n\r\n* Run the following command in your Terminal to set up the Firebase CLI (Command Line Interface)\r\n\r\n````\r\nnpm install -g firebase-tools\r\n````\r\n\r\n* Now to login to Firebase using Terminal, run the following command in the Terminal. This will open a page on the browser and ask you to confirm.\r\n````\r\nfirebase login\r\n````\r\n\r\n* Set the directory one step outside your project directory. For example, in the directory structure shown above the path should be at **Firebase/**\r\n\r\n* Once successful it's time to initialize Firebase\r\n````\r\nfirebase init\r\n````\r\nWhile initializing it will ask you to choose a Firebase, choose the project/app which you created.\r\n\r\n\r\n**It will ask you to choose the application which you want to use for this initialization (choose with arrow keys), select your current chat application. **\r\n\r\n** Then select the name of the application folder **firechat** here\r\n\r\n* It's time to deploy the application\r\n````\r\nfirebase deploy\r\n````\r\n\r\n#### This will give you a url or you can open directly using **firebase open** command in your terminal which will open a new Browser window or a Tab.\r\n\r\n### Send this link to your friends and start chatting!\r\n\r\n## 12. Authenticate Users\r\n\r\n#### Hey, but as we can see, our chat is not yet private. Anyone can join the chat as of now. Let's add Authentication/Login to our application.\r\n\r\n#### I'll show you how to add Google login authentication to our application\r\n\r\n* First, let's create a new Google application at **[https://console.developers.google.com/](https://console.developers.google.com/)**\r\n1. From the left hand side menu, click on All projects. Then select **CREATE PROJECT**.\r\n2. Add your project's name and click the Create button.\r\n3. On the left hand side, a menu will be displayed. Navigate to **Credentials** in it.\r\n4. In the popup that is displayed, select **OAuth client ID**\r\n5. Fill in the **Product Name**. Choose **Web Application** and fill in the name again. \r\n6. Set **Authorized JavaScript origins** to **https://auth.firebase.com**\r\n7. Set **Authorized redirect URIs** to **https://auth.firebase.com/v2/[YOUR-FIREBASE-APP]/auth/google/callback** (remember to replace [YOUR-FIREBASE-AP] with your app name.\r\n8. This will give you a **client ID** and **client secret**. These will be needed.\r\n9. Now go to your Firebase app dashboard and go to **Login & Auth** section. Select the Google tab.\r\n10. Check enable Google Authentication and fill the client ID and client secret from the previous step here.\r\n\r\n* Once done with this, you need to **enable Google authentication in your Firebase**. Go to the link you mentioned in your reference\r\n\r\n\r\n### Let's now start modifying our code to add Google Authentication to our app\r\n\r\n* Finally, replace the username input with a button which will trigger Google login and also disable the post button so that only a logged in user is able to use the application.\r\n\r\nThe **form_container** div should now look like this.\r\n<br/>**(index.html)**\r\n````html\r\n<div id=\"form_container\">\r\n  <button id=\"login\">Google Login</button>\r\n  <textarea id=\"text\" type=\"text\" placeholder=\"Message\"></textarea>\r\n  <button id=\"post\" disabled=\"true\">Post</button>\r\n</div>\r\n````\r\n\r\n* Moving to the script file, we will set the username as null and assign the login button to a variable.\r\n<br/>**(firechat_script.js)**\r\n````javascript\r\nvar username = null;\r\nvar google_login = $('#google_login');\r\nvar message_input = $('#text');\r\nvar send_button = $('#post');\r\nvar results = $('#results');\r\n````\r\n\r\n* Remember that the username variable will exist for only one session, that is, each time the page is refreshed, a login will be required.\r\n\r\n#### We will use **authWithOAuthPopup** to trigger the authentication. Add the following above your **send_button.click()** statements.\r\n<br/>**(firechat_script.js)**\r\n````javascript\r\ngoogle_login_button.click(function() {\r\n  // A login popup will be displayed when the google login button is clicked\r\n  myRef.authWithOAuthPopup(\"google\", function(error, authData) {\r\n    if(error){\r\n      console.log('login failed');\r\n    }else{\r\n      username =  authData.google.displayName;\r\n      //add the username to the post button\r\n      send_button.html(\"Post as \" + username);\r\n     \r\n      // enable the post message button\r\n      send_button.attr('disabled', false);\r\n      google_login_button.attr('disabled', true);\r\n    }\r\n  }, {remember: \"none\"}  // this will end authentication when the page is closed\r\n  );\r\n});\r\n````\r\n\r\n\r\n* Finally we will also want that the previous messages log must be displayed only when the user is logged in. Wrap the **myRef.on('child_added') with myRef.onAuth**.\r\n<br/>**(firechat_script.js)**\r\n````javascript\r\nmyRef.onAuth(function(authData) {\r\n  if (authData) { \r\n    // user has authenticated\r\n    myRef.on('child_added', function(snapshot) {\r\n      msg = snapshot.val();\r\n\r\n      // create a new div and append the user and text from the snapshot to it\r\n      var new_message = $('<div/>');\r\n      new_message.append('<p><strong>' + msg.user + '</strong></p><p>' + msg.text + '</p>');\r\n      // add a class for styling purposes\r\n      new_message.addClass('msg');\r\n    \r\n      // to differentiate between your messages and someone else's messages, we'll add a class 'me'\r\n      // to your messages and style them accordingly\r\n      // new_message.addClass(msg.user == username_input.val() ? ' me' : '')\r\n      $(\"#results\").append(new_message);\r\n      $(\"#results\").animate({scrollTop: $('#results')[0].scrollHeight});\r\n   });\r\n }\r\n}\r\n````\r\n\r\n### Deploy the new code with **firebase deploy** in the Terminal\r\n\r\n### **Refresh** the page where your application was opened. And now login to view/post previous messages\r\n\r\n## 13. Secure (and validate) your Data\r\n\r\n* One security risk that your database faces right now is that anyone who has the access to our Firebase link, can create a reference to it in their application and access our data. Well, Firebase has a solution to this as well!\r\n\r\n### Firebase has a set of Security & Rules which can be used to put restrictions on the data.\r\n\r\n* Let's go to our Firebase dashboard and select **Security & Rules** from the left-hand-side menu\r\n#### We'll now add change the security rules, so that only authorised users can access our data/chat content.\r\n\r\n````\r\n{\r\n  \"rules\": {\r\n    \".read\": \"auth != null\",\r\n    \".write\": \"auth != null\"\r\n  }\r\n}\r\n```` \r\n\r\n*These are just read an write rules. We can also add validation rules to add content limitations to our chat. For example let's limit the length of our chat messages:\r\n````\r\n\"$messageID\": {\r\n  \"text\" : {\r\n    \".validate\": \"newData.isString() && newData.val().length < 140\"\r\n  }\r\n}\r\n````\r\n**$messageID** is a reference to unique message ids.\r\n\r\nOf course, we could have added the same limitation to our html also, but that's something which can be easily bypassed from the front end.\r\n\r\n### There are a host of other validation rules which are documented at [https://www.firebase.com/docs/security/guide/securing-data.html](https://www.firebase.com/docs/security/guide/securing-data.html)\r\n\r\n\r\n#### EXTRA CSS\r\n````css\r\n#chat_container{\r\n\twidth: 75%;\r\n\tmargin: 0 auto;\r\n\tmin-width: 20rem;\r\n\theight: 30rem;\r\n\tmin-height: 300px;\r\n}\r\n\r\n#results{\r\n\twidth: 45%;\r\n\tmargin: 0 auto;\r\n\theight: 75%;\r\n\toverflow-y: auto;\r\n}\r\n\r\n#form_container{\r\n\twidth: 55%;\r\n\tmargin: 0 auto;\r\n}\r\n\r\n#username{\r\n\tdisplay: block;\r\n    width: 95%;\r\n    margin: 0 auto;\r\n   \tborder: 1px solid lightgrey;\r\n    padding: .5rem;\r\n}\r\n\r\n#text{\r\n\tdisplay: block;\r\n    width: 95%;\r\n    margin: 0 auto;\r\n    border: 1px solid lightgrey;\r\n    padding: .5rem;\r\n    margin-top: .5rem;\r\n    height: 3rem;\r\n}\r\n\r\n#post{\r\n\tdisplay: block;\r\n\tmargin: 0 auto;\r\n\tpadding: .3rem;\r\n\tfont-size: 1rem;\r\n}\r\n````\r\n\r\n\r\n## 14. What more can we do?\r\n\r\nFor making this app more user friendly, you can add a logout button in it and keep it logged in even if the page is refreshed or the window is closed. Additionally, you can make it responsive for different screen sizes.\r\n\r\nTo make it even better, you can develop an Android/iOS app for the same and deploy that too!\r\n\r\n## 15. Links to Resources\r\n\r\n#### To keep learning about this awesome technology, here are some links which will be helpful\r\n\r\n* Firebase Documentation: https://www.firebase.com/docs\r\n* Fully functional chat application built with Twitter auth, bootstrap and jQuery: https://github.com/jwngr/gdg-summit/tree/master/chat\r\n* Firebase Presentation slides: https://github.com/jwngr/gdg-summit",
  "google": "UA-69174626-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}